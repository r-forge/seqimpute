library("TraMineR")
data(mvad)
test <- mvad[,-c(1,2)]
?seqimpute
library("seqimpute")
?seqimpute
library("WeightedCluster")
summary(mvad)
library("TraMineR")
library("WeightedCluster")
library("seqimpute")
data(mvad)
summary(mvad$male)
# Analysis without MD ####
mvadseq <- seqdef(mvad[,17:86],weights = mvad$weight)
max_ASWw <- c()
for(i in 6:10){
set.seed(i)
mvad_miss <- make_missing_MAR(mvad[,17:86],states_high="joblessness", max_length_gap = 3)
mi <- 3
imputed <- seqimpute(mvad_miss, mi=mi, ParExec = FALSE)
mvadseq <- seqdef(imputed[,-c(1,2)],weights = rep(mvad$weight,mi))
subm.custom <- matrix(
c(0, 1, 1, 2, 1, 1,
1, 0, 1, 2, 1, 2,
1, 1, 0, 3, 1, 2,
2, 2, 3, 0, 3, 1,
1, 1, 1, 3, 0, 2,
1, 2, 2, 1, 2, 0),
nrow = 6, ncol = 6, byrow = TRUE)
mvaddist <- seqdist(mvadseq, method = "OM", indel = 1.5, sm = subm.custom)
wardCluster <- hclust(as.dist(mvaddist), method="ward.D",members=rep(mvad$weight,mi))
wardRange <- as.clustrange(wardCluster, diss=mvaddist, weights=rep(mvad$weight,mi), ncluster=10)
max_ASWw[i] <- which(wardRange$stats[2:9,"HG"]==max(wardRange$stats[2:9,"HG"]))
}
tmp <- c()
tmp[6] <- 3
tmp
make_missing_MAR<- function(data,pstart_high=0.2,pstart_low=0.03,propdata=0.6,states_high, max_length_gap=10){
sizehalf <- round(propdata*nrow(data))
rowsmiss <- sample(1:nrow(data),size=sizehalf,replace=FALSE)
matrix_missing <- matrix(NA,nrow(data),ncol(data))
for(i in 1:length(rowsmiss)){
nmis <- ncol(data)
length_gap <- 0
while(nmis>floor(0.75*ncol(data))){
for(j in 1:ncol(data)){
if(length_gap==max_length_gap){
matrix_missing[rowsmiss[i],j] <- 1
length_gap <- 0
}else{
if(j==1){
matrix_missing[rowsmiss[i],j] <- sample(x=c(0,1),size=1,p=c(pstart_low,1-pstart_low))
}else{
if(matrix_missing[rowsmiss[i],j-1]==1){
if(data[rowsmiss[i],j-1]%in%states_high){
matrix_missing[rowsmiss[i],j] <- sample(x=c(0,1),size=1,p=c(pstart_high,1-pstart_high))
}else{
matrix_missing[rowsmiss[i],j] <- sample(x=c(0,1),size=1,p=c(pstart_low,1-pstart_low))
}
}else{
matrix_missing[rowsmiss[i],j] <- sample(x=c(0,1),size=1,p=c(66,34))
}
}
if(rowsmiss[i]==0){
length_gap <- length_gap+1
}else{
length_gap <- 0
}
}
}
nmis <- sum(matrix_missing[rowsmiss[i],]==0)
}
}
data[matrix_missing==0] <- NA
return(data)
}
# Scenario 1: joblessness MAR ####
max_ASWw <- c()
for(i in 6:10){
set.seed(i)
mvad_miss <- make_missing_MAR(mvad[,17:86],states_high="joblessness", max_length_gap = 3)
mi <- 3
imputed <- seqimpute(mvad_miss, mi=mi, ParExec = FALSE)
mvadseq <- seqdef(imputed[,-c(1,2)],weights = rep(mvad$weight,mi))
subm.custom <- matrix(
c(0, 1, 1, 2, 1, 1,
1, 0, 1, 2, 1, 2,
1, 1, 0, 3, 1, 2,
2, 2, 3, 0, 3, 1,
1, 1, 1, 3, 0, 2,
1, 2, 2, 1, 2, 0),
nrow = 6, ncol = 6, byrow = TRUE)
mvaddist <- seqdist(mvadseq, method = "OM", indel = 1.5, sm = subm.custom)
wardCluster <- hclust(as.dist(mvaddist), method="ward.D",members=rep(mvad$weight,mi))
wardRange <- as.clustrange(wardCluster, diss=mvaddist, weights=rep(mvad$weight,mi), ncluster=10)
max_ASWw[i] <- which(wardRange$stats[2:9,"HG"]==max(wardRange$stats[2:9,"HG"]))
}
max_ASWw
max_ASWw <- c()
for(i in 1:5){
set.seed(i)
mvad_miss <- make_missing_MAR(mvad[,17:86],states_high="joblessness")
mi <- 3
imputed <- seqimpute(mvad_miss, mi=mi, ParExec = FALSE)
mvadseq <- seqdef(imputed[,-c(1,2)],weights = rep(mvad$weight,mi))
subm.custom <- matrix(
c(0, 1, 1, 2, 1, 1,
1, 0, 1, 2, 1, 2,
1, 1, 0, 3, 1, 2,
2, 2, 3, 0, 3, 1,
1, 1, 1, 3, 0, 2,
1, 2, 2, 1, 2, 0),
nrow = 6, ncol = 6, byrow = TRUE)
mvaddist <- seqdist(mvadseq, method = "OM", indel = 1.5, sm = subm.custom)
wardCluster <- hclust(as.dist(mvaddist), method="ward.D",members=rep(mvad$weight,mi))
wardRange <- as.clustrange(wardCluster, diss=mvaddist, weights=rep(mvad$weight,mi), ncluster=10)
max_ASWw[i] <- which(wardRange$stats[2:9,"HG"]==max(wardRange$stats[2:9,"HG"]))
}
100/0.5
200*10
2000/60
100/2
50*10
100/5
20*10
library("nnet")
?multinom
## 1. Simulations of MD ####
# First resampling of datasets, then simulation of MD
load("C:/Users/Kevin/switchdrive/Sequence missing data/Datasets.Rdata")
source("C:/Users/Kevin/switchdrive/Sim/Functions script.R")
colnames(long_living_4cat)
multinom(V25~V23+V24+V26+V27, data=long_living_4cat)
multinom(V25~V23+V24+V26+V27+V28+V29+V30+V31+V32+V33, data=long_living_4cat)
a <- Sys.time()
multinom(V25~V23+V24+V26+V27+V28+V29+V30+V31+V32+V33, data=long_living_4cat)
b <- Sys.time()
multinom(V25~V23+V24+V26, data=long_living_4cat)
c <- Sys.time()
b-a
c-b
install.packages("MultinomialMutations")
updateR()
library("seqimpute")
data(OD)
is.vector(OD[,1])
is.factor(OD[,1])
length(OD[,1]==nrow(OD))
length(OD[,1])==nrow(OD)
dim(OD[,1])
is.null(dim(OD[,1]))
CO=matrix(NA,nrow=1,ncol=1)
dim(CO)
setwd("C:/Users/Kevin/Documents")
setwd("seqimpute/pkg")
install()
library("devtools")
install()
library("seqimpute")
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
install()
seqimpute(OD,CO=OD[,1])
library("seqimpute")
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
install()
seqimpute(OD,CO=OD[,1])
library("seqimpute")
seqimpute(OD,CO=OD[,1])
list(CO[,1])
list(CO[,1:2])
rep(list(CO[,1:2]),3)
rep(list(OD[,1:2]),3)
tt <- rep(list(OD[,1:2]),2)
dim(tt[[1]])
tt <- rep(list(OD[,1:2]),3)
dim(tt[[1]])
tt <- rep(list(OD[,1]),3)
do.call("rbind", rep(list(OD[,1:2]), 2))
tt <- do.call("rbind", rep(list(OD[,1:2]), 2))
COs <- do.call("rbind",rep(list(OD[,1])),3)
# Concatenating CD and COs into CD
CD <- cbind(CD, COs)
# Concatenating CD and COs into CD
OD <- cbind(OD, COs)
install()
seqimpute(OD,CO=OD[,1])
install()
install()
seqimpute(OD,CO=OD[,1])
seqimpute(OD,CO=OD[,1:2])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
do.call(rbind, replicate(k, as.data.frame(CO[i,]), simplify=FALSE))
do.call(rbind, replicate(4, as.data.frame(OD[17,]), simplify=FALSE))
tt <- do.call(rbind, replicate(4, as.data.frame(OD[17,]), simplify=FALSE))
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
data(OD)
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
install()
seqimpute(OD,CO=OD[,1])
seqimpute(OD,CO=OD[,1],np=2,nf=2)
install()
seqimpute(OD,CO=OD[,1],np=2,nf=2,timing=T)
?seqimpute
?mice
