if (ncol(x) == 0L) {
xy <- data.frame(xy, int = 1)
}
cat.has.all.obs <- table(y[ry]) == sum(ry)
if (any(cat.has.all.obs)) {
return(rep(levels(fy)[cat.has.all.obs], sum(wy)))
}
fit <- nnet::multinom(formula(xy), data = xy[ry, , drop = FALSE],
weights = w[ry], maxit = nnet.maxit, trace = nnet.trace,
MaxNWts = nnet.MaxNWts)
post <- predict(fit, xy[wy, , drop = FALSE], type = "probs")
post
if (sum(wy) == 1) {
post <- matrix(post, nrow = 1, ncol = length(post))
}
if (is.vector(post)) {
post <- matrix(c(1 - post, post), ncol = 2)
}
post
draws <- un > apply(post, 1, cumsum)
draws
idx <- 1 + apply(draws, 2, sum)
idx
apply(post, 1, cumsum)
mice:::mice.impute.logreg
table(list_simdatasets[[1]][,48],list_simdatasets[[1]][,49])
load("C:/Users/Kevin/switchdrive/Sim/Datasets/n6_att.Rdata")
# mice ####
D <- list_simdatasets[[1]]
for(j in 1:ncol(D)){
D[,j] <- droplevels(D[,j])
}
predictionMatrixmultinom1past <- matrix(0,ncol(D),ncol(D))
for(i in 1:ncol(D)){
if(i==1){
predictionMatrixmultinom1past[i,2]<-1
}else{
predictionMatrixmultinom1past[i,i-1]<-1
}
}
data <- D
predictorMatrix <- predictionMatrixmultinom1past
remove_collinear <- FALSE
m = 5
method = NULL
predictorMatrix
ignore = NULL
where = NULL
visitSequence = NULL
blots = NULL
post = NULL
defaultMethod = c("pmm", "logreg", "polyreg", "polr")
maxit = 1
printFlag = TRUE
seed = NA
data.init = NULL
data <- mice:::check.dataform(data)
m <- mice:::check.m(m)
mp <- missing(predictorMatrix)
mb <- TRUE
mf <- TRUE
if (!mp & mb & mf) {
predictorMatrix <- mice:::check.predictorMatrix(predictorMatrix,
data)
blocks <- mice:::make.blocks(colnames(predictorMatrix), partition = "scatter")
formulas <- mice:::make.formulas(data, blocks, predictorMatrix = predictorMatrix)
}
chk <- mice:::check.cluster(data, predictorMatrix)
where <- mice:::check.where(where, data, blocks)
user.visitSequence <- visitSequence
visitSequence <- mice:::check.visitSequence(visitSequence, data = data,
where = where, blocks = blocks)
predictorMatrix <- mice:::edit.predictorMatrix(predictorMatrix = predictorMatrix,
visitSequence = visitSequence, user.visitSequence = user.visitSequence,
maxit = maxit)
method <- mice:::check.method(method = method, data = data, where = where,
blocks = blocks, defaultMethod = defaultMethod)
post <- mice:::check.post(post, data)
blots <- mice:::check.blots(blots, data, blocks)
ignore <- mice:::check.ignore(ignore, data)
state <- list(it = 0, im = 0, dep = "", meth = "", log = FALSE)
loggedEvents <- data.frame(it = 0, im = 0, dep = "", meth = "",
out = "")
setup <- list(method = method, predictorMatrix = predictorMatrix,
visitSequence = visitSequence, post = post)
setup <- mice:::edit.setup(data, setup)
method <- setup$method
predictorMatrix <- setup$predictorMatrix
visitSequence <- setup$visitSequence
post <- setup$post
nmis <- apply(is.na(data), 2, sum)
imp <- mice:::initialize.imp(data, m, ignore, where, blocks, visitSequence,
method, nmis, data.init)
from <- 1
to <- from + maxit - 1
#q <- sampler(data, m, ignore, where, imp, blocks, method,
#visitSequence, predictorMatrix, formulas, blots, post,
#c(from, to), printFlag, ...)
fromto <- c(from,to)
# mice.sampler ####
from <- fromto[1]
to <- fromto[2]
maxit <- to - from + 1
r <- !is.na(data)
chainMean <- chainVar <- mice:::initialize.chain(blocks, maxit, m)
k <- 1
iteration <- k
#for (i in seq_len(m)) {
i <- 1
if (printFlag) {
cat("\n ", iteration, " ", i)
}
for (h in visitSequence[1:48]) {
ct <- attr(blocks, "calltype")
calltype <- ifelse(length(ct) == 1, ct[1],
ct[h])
b <- blocks[[h]]
if (calltype == "formula"){
ff <- formulas[[h]]
}else{
ff <- NULL
}
type <- predictorMatrix[h, ]
user <- blots[[h]]
theMethod <- method[h]
empt <- theMethod == ""
univ <- !empt && !mice:::is.passive(theMethod) &&
!mice:::handles.format(paste0("mice.impute.", theMethod))
mult <- !empt && !mice:::is.passive(theMethod) &&
mice:::handles.format(paste0("mice.impute.", theMethod))
pass <- !empt && mice:::is.passive(theMethod) && length(blocks[[h]]) ==
1
if (printFlag & !empt)
cat(" ", b)
oldstate <- get("state", pos = parent.frame())
newstate <- list(it = k, im = i, dep = h, meth = theMethod,
log = oldstate$log)
assign("state", newstate, pos = parent.frame(),
inherits = TRUE)
if (univ) {
for (j in b) {
imp[[j]][, i] <- mice:::sampler.univ(data = data,
r = r, where = where, type = type, formula = ff,
method = theMethod, yname = j, k = k,
calltype = calltype, user = user, ignore = ignore)
#sampler.univ
data[(!r[, j]) & where[, j], j] <- imp[[j]][(!r[,
j])[where[, j]], i]
cmd <- post[j]
if (cmd != "") {
eval(parse(text = cmd))
data[(!r[, j]) & where[, j], j] <- imp[[j]][(!r[,
j])[where[, j]], i]
}
}
}
}
h <- visitSequence[49]
ct <- attr(blocks, "calltype")
calltype <- ifelse(length(ct) == 1, ct[1],
ct[h])
b <- blocks[[h]]
if (calltype == "formula"){
ff <- formulas[[h]]
}else{
ff <- NULL
}
type <- predictorMatrix[h, ]
user <- blots[[h]]
theMethod <- method[h]
empt <- theMethod == ""
univ <- !empt && !mice:::is.passive(theMethod) &&
!mice:::handles.format(paste0("mice.impute.", theMethod))
mult <- !empt && !mice:::is.passive(theMethod) &&
mice:::handles.format(paste0("mice.impute.", theMethod))
pass <- !empt && mice:::is.passive(theMethod) && length(blocks[[h]]) ==
1
if (printFlag & !empt)
cat(" ", b)
oldstate <- get("state", pos = parent.frame())
newstate <- list(it = k, im = i, dep = h, meth = theMethod,
log = oldstate$log)
assign("state", newstate, pos = parent.frame(),
inherits = TRUE)
j<-b
#sampler.univ
formula <- ff
yname <- j
j <- yname[1L]
if (calltype == "type") {
vars <- colnames(data)[type != 0]
pred <- setdiff(vars, j)
if (length(pred) > 0L) {
formula <- reformulate(pred, response = j)
formula <- update(formula, ". ~ . ")
}
else {
formula <- as.formula(paste0(j, " ~ 1"))
}
}
x <- mice:::obtain.design(data, formula)
if (calltype == "type") {
type <- type[labels(terms(formula))][attr(x, "assign")]
x <- x[, -1L, drop = FALSE]
names(type) <- colnames(x)
}
if (calltype == "formula") {
x <- x[, -1L, drop = FALSE]
type <- rep(1L, length = ncol(x))
names(type) <- colnames(x)
}
y <- data[, j]
ry <- complete.cases(x, y) & r[, j] & !ignore
wy <- complete.cases(x) & where[, j]
if (all(!wy)) {
return(numeric(0))
}
cc <- wy[where[, j]]
if (k == 1L)
mice:::check.df(x, y, ry)
keep <- mice:::remove.lindep(x, y, ry)
x <- x[, keep, drop = FALSE]
type <- type[keep]
if (ncol(x) != length(type)) {
stop("Internal error: length(type) != number of predictors")
}
f <- paste("mice.impute", method, sep = ".")
imputes <- data[wy, j]
imputes[!cc] <- NA
# polyreg ####
wy = NULL
nnet.maxit = 100
nnet.trace = FALSE
nnet.MaxNWts = 1500
if (is.null(wy)) {
wy <- !ry
}
xy <- cbind.data.frame(y = y, x = x)
fit <- nnet::multinom(formula(xy), data = xy[ry, , drop = FALSE],
weights = w[ry], maxit = nnet.maxit, trace = nnet.trace,
MaxNWts = nnet.MaxNWts)
w[712:752,]
w[712:752]
w <- w[1:712,]
w <- w[1:712]
fit <- nnet::multinom(formula(xy), data = xy[ry, , drop = FALSE],
weights = w[ry], maxit = nnet.maxit, trace = nnet.trace,
MaxNWts = nnet.MaxNWts)
post <- predict(fit, xy[wy, , drop = FALSE], type = "probs")
post_saved <- post
# polyreg ####
wy = NULL
nnet.maxit = 100
nnet.trace = FALSE
nnet.MaxNWts = 1500
if (is.null(wy)) {
wy <- !ry
}
x <- as.matrix(x)
aug <- mice:::augment(y, ry, x, wy)
x <- aug$x
y <- aug$y
ry <- aug$ry
wy <- aug$wy
w <- aug$w
fy <- as.factor(y)
nc <- length(levels(fy))
un <- rep(runif(sum(wy)), each = nc)
xy <- cbind.data.frame(y = y, x = x)
if (ncol(x) == 0L) {
xy <- data.frame(xy, int = 1)
}
cat.has.all.obs <- table(y[ry]) == sum(ry)
if (any(cat.has.all.obs)) {
return(rep(levels(fy)[cat.has.all.obs], sum(wy)))
}
fit <- nnet::multinom(formula(xy), data = xy[ry, , drop = FALSE],
weights = w[ry], maxit = nnet.maxit, trace = nnet.trace,
MaxNWts = nnet.MaxNWts)
post <- predict(fit, xy[wy, , drop = FALSE], type = "probs")
post-post_saved
dim(post)
dim(post_saved)
post
post_saved
post_saved <- post_saved[,c(2,1,5,4,3)]
post_saved$employment
post_saved[,"employment"]-post[,"employment"]
test <- mice(data,m=1,remove_collinear=T,predictorMatrix = predictionMatrixmultinom1past)
test <- mice(data,m=1,remove_collinear=T,predictorMatrix = predictionMatrixmultinom1past,maxit = 1)
library("seqimpute")
test_seqimp <- seqimpute(list_simdatasets[[1]],np=1,m=1)
test_mice <- mice(data,m=1,remove_collinear=T,predictorMatrix = predictionMatrixmultinom1past,maxit = 1)
test_mice <- complete(test_mice,1)
test_seqimp <- test_seqimp[test_seqimp$.imp==1,]
test_seqimp <- test_seqimp[test_seqimp$.imp==1,3:72]
# First resampling of datasets, then simulation of MD
load("C:/Users/Kevin/switchdrive/Sequence missing data/Datasets.Rdata")
source("C:/Users/Kevin/switchdrive/Sim/Functions script.R")
sum(mvad.seq[,72]=="employment")
sum(test_mice[,72]=="employment")
sum(test_seqimp[,72]=="employment")
test_seqimp <- seqimpute(list_simdatasets[[1]],np=1,m=1)
test_seqimp <- test_seqimp[test_seqimp$.imp==1,3:74]
sum(test_seqimp[,72]=="employment")
test_seqimp <- seqimpute(list_simdatasets[[1]],np=1,m=1,timeFrame = 0,timing=T)
test_seqimp <- test_seqimp[test_seqimp$.imp==1,3:74]
sum(test_seqimp[,72]=="employment")
predictorMatrix <- predictionMatrixmultinom1past
test_mice <- mice(data,m=1,remove_collinear=T,predictorMatrix = predictionMatrixmultinom1past,maxit = 1)
test_seqimp <- seqimpute(list_simdatasets[[1]],np=1,m=1,timeFrame = 0,timing=T)
test_mice <- complete(test_mice,1)
test_seqimp <- test_seqimp[test_seqimp$.imp==1,3:74]
diff_seqimp <- c()
diff_mice <- c()
for(i in 1:ncol(test_seqimp)){
diff_seqimp[i] <- sum(test_seqimp[,i]=="employment")-sum(mvad.seq[,i]=="employment")
diff_mice[i] <- sum(test_mice[,i]=="employment")-sum(mvad.seq[,i]=="employment")
}
diff_seqimp
diff_mice
load("C:/Users/Kevin/switchdrive/Sim/Datasets/Datasets_permuted_att.Rdata")
for(i in 1:ncol(test_seqimp)){
diff_seqimp[i] <- sum(test_seqimp[,i]=="employment")-sum(list_datasets_perm[[6]][[1]][,i]=="employment")
diff_mice[i] <- sum(test_mice[,i]=="employment")-sum(list_datasets_perm[[6]][[1]][,i]=="employment")
}
diff_mice
diff_seqimp
rownames(list_datasets_perm[[6]][[1]])
rownames(test_seqimp)
rownames(list_simdatasets[[1]])
rownames(list_datasets_perm[[6]][[1]])
diff_seqimp <- c()
diff_mice <- c()
sum_mvad <- c()
for(i in 1:ncol(test_seqimp)){
diff_seqimp[i] <- sum(test_seqimp[,i]=="employment")-sum(list_datasets_perm[[6]][[1]][,i]=="employment")
diff_mice[i] <- sum(test_mice[,i]=="employment")-sum(list_datasets_perm[[6]][[1]][,i]=="employment")
}
diff_seqimp
diff_mice
table(list_datasets_perm[[6]][[1]][,72])
table(test_seqimp[,72])
table(test_mice[,72])
rm(list=ls())
gc()
load("C:/Users/Kevin/switchdrive/Sim/Results/mice_multinom_P1_att/mice_multinom_P1_n6_m1_att.Rdata")
rm()
load("C:/Users/Kevin/switchdrive/Sim/Results/mice_multinom_P1_att_seq/mice_multinom_P1_n6_m1_att_seq.Rdata")
load("C:/Users/Kevin/switchdrive/Sim/Results/seqimpute_multinom_t0_P1F1_att_seq/seqimp_t0_P1F1_n6_m1_att_seq.Rdata")
load("C:/Users/Kevin/switchdrive/Sim/Datasets/n6_att.Rdata")
load("C:/Users/Kevin/switchdrive/Sim/Datasets/Datasets_permuted_att.Rdata")
diff_seqimp <- c()
diff_mice <- c()
for(m in 1:10){
diff_seqimp[m] <- sum(seqimp[[m]][,72]=="employment")-sum(list_datasets_perm[[6]][[1]][,72]=="employment")
diff_mice[m] <- sum(mice_multinom[[m]][,72]=="employment")-sum(list_datasets_perm[[6]][[1]][,72]=="employment")
}
mean(diff_seqimp)
mean(diff_mice)
library("TraMineR")
seqstatd(seqimp[[1]])
seqstatd(seqimp[[1]][,72])
seqstatd(seqimp[[1]])[,72]
seqstatd(seqimp[[1]])$Frequencies
seqstatd(seqimp[[1]])$Frequencies[,72]
for(m in 1:10){
diff_seqimp[m] <- seqstatd(seqimp[[m]])$Frequencies[,72]
diff_mice[m] <- seqstatd(mice_multinom[[m]])$Frequencies[,72]
}
for(m in 1:10){
diff_seqimp[m] <- seqstatd(seqimp[[m]])$Frequencies["employment",72]
diff_mice[m] <- seqstatd(mice_multinom[[m]])$Frequencies["employment",72]
}
mean(diff_seqimp)
mean(diff_mice)
seqstatd(seqdef(list_datasets_perm[[1]]))$Frequencies["employment",72]
seqstatd(seqdef(list_datasets_perm[[6]][[1]]))$Frequencies["employment",72]
load("C:/Users/Kevin/switchdrive/Sim/Criteria/timing_MAR.Rdata")
original[[6]][,72]
test <- c()
for(m in 1:100){
test[[m]] <- seqstatd(seqdef(list_datasets_perm[[6]][[m]]))$Frequencies["employment",72]
}
mean(test[[m]])
test
load("C:/Users/Kevin/switchdrive/Sim/Results/mice_multinom_P1_att_seq/mice_multinom_P1_n6_m7_att_seq.Rdata")
load("C:/Users/Kevin/switchdrive/Sim/Results/seqimpute_multinom_t0_P1F1_att_seq/seqimp_t0_P1F1_n6_m7_att_seq.Rdata")
diff_seqimp <- c()
diff_mice <- c()
sum_mvad <- c()
for(i in 1:ncol(test_seqimp)){
diff_seqimp[i] <- sum(test_seqimp[,i]=="employment")-sum(list_datasets_perm[[6]][[1]][,i]=="employment")
diff_mice[i] <- sum(test_mice[,i]=="employment")-sum(list_datasets_perm[[6]][[1]][,i]=="employment")
}
for(m in 1:10){
diff_seqimp[m] <- seqstatd(seqimp[[m]])$Frequencies["employment",72]
diff_mice[m] <- seqstatd(mice_multinom[[m]])$Frequencies["employment",72]
}
mean(diff_seqimp)
mean(diff_mice)
rm(list=ls())
gc()
load("C:/Users/Kevin/switchdrive/Sim/Criteria/bias_timing/mice_multinom_P5_n1_att_timing_results.Rdata")
results
load("C:/Users/Kevin/switchdrive/Sim/Criteria/bias_timing/mice_multinom_P1_n6_att_timing_results.Rdata")
tt <- results[,,,72]
tt
tt <- results[,,1,72]
tt
load("C:/Users/Kevin/switchdrive/Sim/Criteria/timing_MAR.Rdata")
tt
boxplot(tt[,2]-original[[6]][1])
original[[6]]
boxplot(tt[,2]-original[[6]][1,72])
boxplot(as.numeric(tt[,2])-original[[6]][1,72])
mice_saved <- as.numeric(tt[,2])-original[[6]][1,72]
load("C:/Users/Kevin/switchdrive/Sim/Criteria/bias_timing/seqimp_t0_P1F1_n6_att_timing_results.Rdata")
tt <- results[,,1,72]
mice_saved <- as.numeric(tt[,2])-original[[6]][1,72]
boxplot(mice_saved)
tt
load("C:/Users/Kevin/switchdrive/Sim/Criteria/bias_timing/mice_multinom_P1_n6_att_timing_valeur.Rdata")
results
param
dim(param[[1]])
load("C:/Users/Kevin/switchdrive/Sim/Datasets/n1_MNAR_low.Rdata")
rowSums(is.na(list_simdatasets[[1]]))
which(is.na(list_simdatasets[[1]][2,]))
## 1. Simulations of MD ####
# First resampling of datasets, then simulation of MD
load("C:/Users/Kevin/switchdrive/Sequence missing data/Datasets.Rdata")
load("C:/Users/Kevin/switchdrive/Sim/Datasets/Datasets_permuted_MNAR_low.Rdata")
list_datasets_perm[[1]][2,]
list_datasets_perm[[1]][[1]][2,]
list_datasets_perm[[1]][[1]][14,]
list_simdatasets[[1]][14,]
load("C:/Users/Kevin/Downloads/tree.RData")
attr(tree,"variable.labels")
colnames(tree)
library("mice")
mice
mice:::check.deprecated
replace.args <- list(imputationMethod = "method", defaultImputationMethod = "defaultMethod",
form = "formulas")
names(replace.args)
mice:::edit.setup
mice:::sampler
?mice
mice(nhanes2, imputationMethethod = c("sample", "pmm", "logreg", "norm"))
mice(nhanes2, defaultImputationMethethod = c("sample", "pmm", "logreg", "norm"))
check.deprecated(defaultImputationMethethod = c("sample", "pmm", "logreg", "norm"))
mice:::check.deprecated(defaultImputationMethethod = c("sample", "pmm", "logreg", "norm"))
names(list(defaultImputationMethethod = c("sample", "pmm", "logreg", "norm")))
nms <- names(list(defaultImputationMethethod = c("sample", "pmm", "logreg", "norm")))
replace.args <- list(imputationMethod = "method", defaultImputationMethod = "defaultMethod",
form = "formulas")
wrn <- names(replace.args) %in% nms
wrn
replace.args
names(replace.args)
nms
wrn
names(replace.args)[2]
wrn <- names(replace.args) %in% nms
names(replace.args) %in% nms
nms
names(replace.args)[2]==nms
nms
names(replace.args)
names(replace.args)[2]
mice(nhanes2, defaultImputationMethod = c("sample", "pmm", "logreg", "norm"))
require(mice)
require(seqimpute)
require(WeightedCluster)
?as.clustrange
data(mvad)
## Aggregating state sequence
aggMvad <- wcAggregateCases(mvad[, 17:86], weights=mvad$weight)
## Creating state sequence object
mvad.seq <- seqdef(mvad[aggMvad$aggIndex, 17:86], weights=aggMvad$aggWeights)
## COmpute distance using Hamming distance
diss <- seqdist(mvad.seq, method="HAM")
## Ward clustering
wardCluster <- hclust(as.dist(diss), method="ward", members=aggMvad$aggWeights)
## Computing clustrange from Ward clustering
wardRange <- as.clustrange(wardCluster, diss=diss,
weights=aggMvad$aggWeights, ncluster=15)
wardRange
which.min(wardRange$HC)
which.min(wardRange[,"HC"])
which.min(wardRange$stats$HC)
library("seqimpute")
seqimpute(OD[1:200,],m=2)
RESULT <- seqimpute(OD[1:200,],m=2)
rowsNA <- 98
mi<-2
i<-1
dim(RESULT[1:(nrowsDataset*(j-1)+rowsNA[i]-1),])
nrowsDataset <- 200
dim(RESULT[1:(nrowsDataset*(j-1)+rowsNA[i]-1),])
j<-1
dim(RESULT[1:(nrowsDataset*(j-1)+rowsNA[i]-1),])
c(j-1,rep(NA,ncol(RESULT)))
rbind(RESULT[1:(nrowsDataset*(j-1)+rowsNA[i]-1),],c(j-1,rep(NA,(ncol(RESULT)-1))),RESULT[(nrowsDataset*(j-1)+rowsNA[i]):nrow(RESULT),])
setwd("C:/Users/Kevin/Documents/Kevin/seqimpute/pkg")
setwd("C:/Users/Kevin/Documents/seqimpute/pkg")
library("devtools")
install()
seqimpute(OD)
library("seqimpute")
seqimpute(OD)
